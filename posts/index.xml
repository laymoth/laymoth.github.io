<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Postingan on Laymoth</title><link>https://laymoth.dev/posts/</link><description>Recent content in Postingan on Laymoth</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Sun, 26 Jun 2022 22:04:49 +0700</lastBuildDate><atom:link href="https://laymoth.dev/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Macam Macam Percabangan Dan Perulangan</title><link>https://laymoth.dev/macam-macam-percabangan-dan-perulangan/</link><pubDate>Mon, 27 Jun 2022 21:22:58 +0700</pubDate><guid>https://laymoth.dev/macam-macam-percabangan-dan-perulangan/</guid><description>Percabangan if else Karakteristrik : terdapat pengkodisian yang cukup kompleks yang mempengaruhi hasil
Contoh :
nilaiUjian = 10 if((x &amp;lt; 100) &amp;amp; (x&amp;gt;80)) cetak lulus terbaik else if((x &amp;lt; 100) &amp;amp; (x&amp;gt;50)) cetak lulus else cetak gagal Percabangan switch case Karakteristrik : tidak terdapat pengkodisian yang ada hanyalah penukaran bilangan
Contoh :
noAbsent = 3 switch(noAbsent) case 1 : Ahmad Jainudin case 2 : Boby Sugandi case 3 : Dodi Sukmawan case 4 : Bukan Mahasiswa Percabangan case when Karakteristrik : terdapat pengkodisian tetapi tidak ada percabangan bersarang</description><content type="html"><![CDATA[<h4 id="percabangan-if-else">Percabangan if else</h4>
<p>Karakteristrik : terdapat pengkodisian yang cukup kompleks yang mempengaruhi hasil</p>
<p>Contoh :</p>
<pre tabindex="0"><code>nilaiUjian = 10
if((x &lt; 100) &amp; (x&gt;80))
 cetak lulus terbaik
else if((x &lt; 100) &amp; (x&gt;50))
 cetak lulus
else
 cetak gagal
</code></pre><h4 id="percabangan-switch-case">Percabangan switch case</h4>
<p>Karakteristrik : tidak terdapat pengkodisian yang ada hanyalah penukaran bilangan</p>
<p>Contoh :</p>
<pre tabindex="0"><code>noAbsent = 3
switch(noAbsent)
 case  1 :
 Ahmad Jainudin
 case 2 :
 Boby Sugandi
 case 3 :
 Dodi Sukmawan
 case 4 :
 Bukan Mahasiswa
</code></pre><h4 id="percabangan-case-when">Percabangan case when</h4>
<p>Karakteristrik : terdapat pengkodisian tetapi tidak ada percabangan bersarang</p>
<p>Contoh :</p>
<pre tabindex="0"><code>warna = “merah”
case when warna = “biru”
 then “cocok”
 else “tidak cocok”
end
</code></pre><h4 id="pengulangan-for">Pengulangan For</h4>
<p>Karakteristrik : looping dengan menggunakan pengkondisian</p>
<p>Contoh :</p>
<pre tabindex="0"><code>for(i=0; i&lt;10; i++)
  cetak i
</code></pre><h4 id="pengulangan-while">Pengulangan while</h4>
<p>Karakteristrik : looping dengan menggunakan batas tertentu
Contoh :</p>
<pre tabindex="0"><code>x = {10, 8, 5, 4, 3}
while(x)
 cetak x
</code></pre><h4 id="pengulangan-do-while">Pengulangan do while</h4>
<p>Karakteristrik : looping dengan menggunakan kondisi tetapi loopingnya di jalankan dulu baru cek kondisi</p>
<p>Contoh :</p>
<pre tabindex="0"><code>x = 3
do{
  cetak x	
} while(x&lt;2)
</code></pre>]]></content></item><item><title>Tiga Algoritma Dasar</title><link>https://laymoth.dev/tiga-algoritma-dasar/</link><pubDate>Mon, 27 Jun 2022 21:00:58 +0700</pubDate><guid>https://laymoth.dev/tiga-algoritma-dasar/</guid><description>Struktur dasar algoritma dibagi menjadi 3, yaitu : Sekuensial (Sequential) Pemilihan atau Percabangan (Selection) Perulangan (Looping) Sekuensial (Sequential) Sekuensial adalah algoritma yang terdiri dari satu atau lebih instruksi, yang setiap instruksinya dikerjakan secara berurutan sesuai dengan urutan penulisan algoritma tersebut. Sebuah instruksi dikerjakan setelah instruksi sebelumnya dikerjakan.
Contoh, Buat sebuah program/algoritma untuk menyelesaikan masalah tersebut “pindahkan air yang ada di ember A ke dalam ember B yang berisi air juga, dan sebaliknya ember B yang berisi air ke ember A yang berisi air juga”</description><content type="html"><![CDATA[<h4 id="struktur-dasar-algoritma-dibagi-menjadi-3-yaitu-">Struktur dasar algoritma dibagi menjadi 3, yaitu :</h4>
<ul>
<li>Sekuensial (Sequential)</li>
<li>Pemilihan atau Percabangan (Selection)</li>
<li>Perulangan (Looping)</li>
</ul>
<h4 id="sekuensial-sequential">Sekuensial (Sequential)</h4>
<p>Sekuensial adalah algoritma yang terdiri dari satu atau lebih instruksi, yang setiap instruksinya dikerjakan secara berurutan sesuai dengan urutan penulisan algoritma tersebut. Sebuah instruksi dikerjakan setelah instruksi sebelumnya dikerjakan.</p>
<p>Contoh, Buat sebuah program/algoritma untuk menyelesaikan masalah tersebut “pindahkan air yang ada di ember A ke dalam ember B yang berisi air juga, dan sebaliknya ember B yang berisi air ke ember A yang berisi air juga”</p>
<p>Algoritma Penyelesaian :</p>
<ul>
<li>Ember A di isi Air</li>
<li>Ember B di isi Air</li>
<li>Siapkan Ember C untuk penampung sementara</li>
<li>Masukan air ember B ke C</li>
<li>Masukan air ember A ke B</li>
<li>Masukan air ember C ke A</li>
</ul>
<p>Algoritma selection adalah algoritma yang akan menghasilkan kemungkinan-kemungkinan bisa dua atau lebih kemungkinan, tetapi yang menjadi hasil tetap satu saja.</p>
<p>Sebelum mempelajari algoritma selection dan looping harus paham dulu operator dasar dan tabel kebenaran</p>
<p>Jenis Operator<br>
<code>=</code> (Sama Dengan)<br>
<code>!=</code> (Tidak Sama Dengan)<br>
<code>&gt;</code> (Lebih Besar)<br>
<code>&lt;</code> (Lebih Kecil)<br>
<code>=&gt;</code> (Lebih Besar Sama Dengan)<br>
<code>&lt;=</code> (Lebih kecil Sama Dengan)<br>
<code>&amp;</code> (dan)<br>
<code>||</code> (atau)</p>
<h4 id="contoh-percabangan">Contoh Percabangan</h4>
<p>“Buatlah algoritma untuk memasukan daging gajah kedalam kulkas”</p>
<ul>
<li>Siapkan daging gajah</li>
<li>Buka kulkas terlebih dahulu</li>
<li>Cek jika ada barang di kulkas<br>
   maka keluarkan<br>
   jika tidak maka masukan daging</li>
<li>Tutup Kulkas</li>
</ul>
<h4 id="perulangan-looping">Perulangan (Looping)</h4>
<p>Adalah algoritma dasar yang berfungsi untuk mengulang kerjaan atau perintah selama kondisi pengulangan terpenuhi.</p>
<p>Sama halnya dengan algoritma percabangan dalam memahami algoritma looping ini harus terlebih dahulu mengenal operator dasar dan table kebenaran.</p>
<p>Contoh kasus “buatkan program atau algoritma memasak mie instan”</p>
<ul>
<li>Siapkan panci dan penggorengan</li>
<li>Masukan air kedalam panci</li>
<li>Masukan mie</li>
<li>Panaskan panci</li>
<li>Cek jika mie sudah mengembang maka matikan kompor jika belum cek kembali</li>
<li>Sajika mie dalam piring</li>
</ul>
]]></content></item><item><title>Pohon Biner</title><link>https://laymoth.dev/pohon-biner/</link><pubDate>Mon, 27 Jun 2022 09:05:42 +0700</pubDate><guid>https://laymoth.dev/pohon-biner/</guid><description>Pohon berakar (pohon) adalah beberapa graf yang terkoneksi seperti path sederhana yang unik dengan tanpa siklus pada verteks yang disebut akar R.
Biasanya pohon digambarkan mulai dari akar (atas) ke daun (bawah), atau dari akar (kiri) ke daun (kanan).
Pohon berurut adalah pohon berlabel mulai dari 0 (akar), 1, 2,… (node), 1.1,1.2,…, 2.1,2.2, … (cabang dari node), dan seterusnya sampai pada daun.
Jumlah cabang untuk setiap node dapat berbeda.
Pohon Berakar Terurut Pohon berakar terurut adalah pohon yang setiap anak dari induknya diurutkan dari kiri ke kanan (akar di atas).</description><content type="html"><![CDATA[<p>Pohon berakar (pohon) adalah beberapa graf yang terkoneksi seperti path sederhana yang unik dengan tanpa siklus pada verteks yang disebut akar R.<br>
Biasanya pohon digambarkan mulai dari akar (atas) ke daun (bawah), atau dari akar (kiri) ke daun (kanan).<br>
Pohon berurut adalah pohon berlabel mulai dari 0 (akar), 1, 2,… (node), 1.1,1.2,…, 2.1,2.2, … (cabang dari node), dan seterusnya sampai pada daun.<br>
Jumlah cabang untuk setiap node dapat berbeda.</p>
<p><img src="/assets/pohon-biner.png" alt="Pohon Biner"></p>
<h4 id="pohon-berakar-terurut">Pohon Berakar Terurut</h4>
<p>Pohon berakar terurut adalah pohon yang setiap anak dari induknya diurutkan dari kiri ke kanan (akar di atas).<br>
Urutan secara leksikografik mulai dari 0, 1, 1.1, 1.2, … , 2, 2.1,2.2, … dst.<br>
Akar membawahi anak (child), setiap anak dapat membawahi anak dari anak.<br>
Setiap anak mempunyai induk (parent).<br>
Anak 1.1 mempunyai sibling 1.2, 1.3 dan seterusnya (jika ada).<br>
Anak dari akar mempunyai nomor tingkat ke-1, anak dari anak mempunyai nomor tingkat ke-2, dan seterusnya.<br>
Kedalaman pohon adalah jumlah tingkat maksimal (sesuai dengan nomor tingkat tertinggi) dari salah satu cabang.<br>
Pohon dapat dianggap sebagai himpunan sub-pohon  .</p>
<h4 id="pohon-biner">Pohon Biner</h4>
<p>Pohon biner merupakan struktur dasar matematika dan ilmu komputer.<br>
Istilah-istilah yang berlaku pada pohon (umum) seperti node, induk, anak, tingkat, kedalaman dsb., juga berlaku pada pohon biner.<br>
Pohon biner T adalah himpunan terbatas elemen yang disebut node. T dapat merupakan himpunan kosong (pohon kosong), atau terdiri dari node R sebagai akar yang dapat diikuti oleh dua pohon T1 dan T2 yang disjoin dan terurut.<br>
Perbedaan utama pohon biner terhadap pohon terurut adalah jumlah anak (suksesor langsung) dari node pada pohon biner selalu dua (jika ada), yang disebut node suksesor kanan dan node suksesor kiri.<br>
Jika node tidak mempunyai suksesor disebut node terminal (daun).</p>
<p>Contoh:<br>
Pada gambar di bawah :<br>
T1, T2, T3 adalah merupakan pohon berakar.<br>
T1, T2, T3 adalah juga merupakan pohon berakar terurut, di mana : T1 dan T2 mempunyai urutan yang sama (A,B,C,D), T3 mempunyai urutan (A,C,B,D).<br>
T1, T2, T3 adalah juga merupakan pohon biner, di mana T1 dan T2 berbeda pada node D (pada T1: D adalah suksesor kiri, sedangkan pada T2: D adalah suksesor kanan)  .</p>
<p><img src="/assets/m4-b4node.jpg" alt="Pohon Biner 4 Node"></p>
<p>Pohon biner serupa adalah pohon biner yang mempunyai kesamaan struktur (kesamaan suksesor kiri atau kanan dari semua cabang node).
Pohon biner salinan (copy) adalah pohon biner yang mempunyai kesamaan bentuk.</p>
<p>Ekspresi aljabar dapat direpresentasikan dengan pohon biner.<br>
Contoh : E = (2x + y).(5a - b)^3</p>
<p><img src="/assets/m4-pb.jpg" alt="Pohon Biner"></p>
<p>Pohon biner dapat dipakai dalam mengelola memori dengan menggunakan array
INFO, LEFT dan RIGHT
Contoh:
Representasikan urutan info mulai dari akar beralamat : 14 dalam bentuk pohon
biner :</p>
<table>
<thead>
<tr>
<th>Alamat</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
<th>11</th>
<th>12</th>
<th>13</th>
<th>14</th>
<th>15</th>
<th>16</th>
<th>17</th>
<th>18</th>
</tr>
</thead>
<tbody>
<tr>
<td>INFO</td>
<td>H</td>
<td>R</td>
<td></td>
<td>P</td>
<td>B</td>
<td></td>
<td>E</td>
<td></td>
<td>C</td>
<td>F</td>
<td>Q</td>
<td>S</td>
<td></td>
<td>A</td>
<td>K</td>
<td>L</td>
<td></td>
<td>D</td>
</tr>
<tr>
<td>LEFT</td>
<td>4</td>
<td>0</td>
<td></td>
<td>0</td>
<td>18</td>
<td></td>
<td>1</td>
<td></td>
<td>0</td>
<td>15</td>
<td>0</td>
<td>0</td>
<td></td>
<td>5</td>
<td>2</td>
<td>0</td>
<td></td>
<td>0</td>
</tr>
<tr>
<td>RIGHT</td>
<td>11</td>
<td>0</td>
<td></td>
<td>0</td>
<td>7</td>
<td></td>
<td>0</td>
<td></td>
<td>10</td>
<td>16</td>
<td>12</td>
<td>0</td>
<td></td>
<td>9</td>
<td>0</td>
<td>0</td>
<td></td>
<td>0</td>
</tr>
</tbody>
</table>
<p>Jawaban:</p>
<p><img src="/assets/m4-13n.jpg" alt="13 Node"></p>
<h4 id="penelusuran-traversal-pohon-biner">Penelusuran (Traversal) Pohon Biner:</h4>
<p>Ada tiga algoritma traversal pohon biner (rekursif), yaitu : pre-order, in-order dan
post-order<br>
<strong>Pre-order:</strong></p>
<ul>
<li>Proses akar R</li>
<li>Traverse sub pohon kiri dari R secara pre-order</li>
<li>Traverse sub pohon kanan dari R secara pre-order</li>
</ul>
<p><strong>In-order:</strong></p>
<ul>
<li>Traverse sub pohon kiri dari R secara in-order</li>
<li>Proses akar R</li>
<li>Traverse sub pohon kanan dari R secara in-order</li>
</ul>
<p><strong>Post-order:</strong></p>
<ul>
<li>Traverse sub pohon kiri dari R secara post-order</li>
<li>Traverse sub pohon kanan dari R secara post-order</li>
</ul>
<p>Contoh:</p>
<p><img src="/assets/m4-6n.jpg" alt="6 Node"></p>
<p>Pre-order: ABDECF<br>
In-order: DBEACF<br>
Post-order: DEBFCA</p>
]]></content></item><item><title>Fungsi</title><link>https://laymoth.dev/fungsi/</link><pubDate>Sun, 26 Jun 2022 23:43:49 +0700</pubDate><guid>https://laymoth.dev/fungsi/</guid><description>Fungsi adalah pemetaan dari suatu himpunan A ke himpunan lain B secara unik (semua elemen pada A harus ada pemetaannya pada B secara unik, dan hasil pemetaan pada B boleh berasal dari lebih dari satu elemen di A).
Simbol fungsi dari himpunan A ke himpunan B :
Contoh :
A = {1,2,3,4,5}
Fungsi f (a) dalam bentuk himpunan elemen berpasangan &amp;lt;a,f(a)&amp;gt; :
f = {&amp;lt;1,3&amp;gt;,&amp;lt;2,5&amp;gt;,&amp;lt;3,5&amp;gt;,&amp;lt;4,2&amp;gt;,&amp;lt;5,3&amp;gt;}
Fungsi Riil Hasil pemetaan fungsi bilangan bulat yang menghasilkan bilangan bulat berbentuk diskrit.</description><content type="html"><![CDATA[<p>Fungsi adalah pemetaan dari suatu himpunan A ke himpunan lain B secara unik (semua elemen pada A harus ada pemetaannya pada B secara unik, dan hasil pemetaan pada B boleh berasal dari lebih dari satu elemen di A).</p>
<p>Simbol fungsi dari himpunan A ke himpunan B :</p>
<p><img src="/assets/m3-fungsi.jpg" alt="Fungsi"></p>
<p>Contoh :<br>
A = {1,2,3,4,5}<br>
Fungsi f (a) dalam bentuk himpunan elemen berpasangan &lt;a,f(a)&gt; :<br>
f = {&lt;1,3&gt;,&lt;2,5&gt;,&lt;3,5&gt;,&lt;4,2&gt;,&lt;5,3&gt;}</p>
<h4 id="fungsi-riil">Fungsi Riil</h4>
<p>Hasil pemetaan fungsi bilangan bulat yang menghasilkan bilangan bulat berbentuk diskrit. Pemetaan fungsi bilangan riil yang menghasilkan bilangan riil berbentuk kontinu dengan jumlah elemen yang tidak berhingga.</p>
<p>Ada empat pembatas fungsi riil<br>
Interval tertutup : [a,b] = {x : a &lt; x &lt; b}<br>
Interval terbuka atas : [a,b) = {x : a &lt; x &lt; b}<br>
Interval terbuka bawah : (a,b] = (x : a &lt; x &lt; b}<br>
Interval terbuka : (a,b) = {x : a &lt; x &lt; b}<br>
Fungsi kontinu dapat didekati dengan fungsi diskrit yang diinterpolasi</p>
<h4 id="komposisi-fungsi">Komposisi Fungsi</h4>
<p>Komposisi dua fungsi atau lebih yang melibatkan himpunan perantara yang sama akan menghasilkan fungsi baru (fungsi komposisi) yang memetakan elemen himpunan pertama ke himpunan terakhir secara unik.<br>
Contoh :<br>
f : A → B; g : B → C; h = g o f atau g(f(a)) : A → C</p>
<p><img src="/assets/m3-fungsi-komposisi.jpg" alt="FK"></p>
<p>Misal :<br>
A = {a,b,c}; B = {x,y,z}; C = {r,s,t}<br>
f : A → B; g : B → C; h = g o f : A → C
(g o f)(a) = g(f(a)) = g(y) = t<br>
(g o f)(b) = g(f(b)) = g (x) = s<br>
(g o f)(c) = g(f(c)) = g(y) = t<br>
Cara mengikuti panah :<br>
a → y → t; b → x → s; c → y → t</p>
<h4 id="diagram-peta-fungsi-graf-berarah">Diagram peta Fungsi: Graf Berarah:</h4>
<p>Contoh:<br>
f : A → B; b : B → A; h : C → B; e : B → C; dan d : A → C<br>
dapat dibuat dalam bentuk diagram peta sbb :</p>
<p><img src="/assets/m3-diagram.jpg" alt="Diagram"></p>
<h4 id="satu-satu-onto-dan-invertibel">Satu-Satu, Onto dan Invertibel</h4>
<p>Fungsi satu-satu (Injektif) adalah jika setiap elemen yang dipetakan mempunyai peta yang berbeda-beda secara unik<br>
Fungsi Onto (Surjektif) adalah jika setiap elemen pemetaan adalah elemen pemetaan dari beberapa elemen yang dipetakan<br>
Fungsi bijektif adalah fungsi satu-satu dan onto sekaligus<br>
Fungsi invertibel adalah jika f : A → B juga ada g : B → A<br>
Fungsi konstan adalah jika hasil pemetaan menunjuk ke satu nilai<br>
Contoh :<br>
f1 : A → B; f2 : B → C; f3 : C → D dan f4 : D → E, seperti gambar :</p>
<p><img src="/assets/m3-jenis-fungsi.jpg" alt="Jenis Fungsi"></p>
<p>Fungsi satu-satu : f1 dan f2<br>
Fungsi onto : f2 dan f3<br>
Fungsi bijektif : f2<br>
Fungsi invertibel : f2<br>
Fungsi konstan : f4</p>
<h4 id="fungsi-matematika-dan-ilmu-komputer">Fungsi Matematika dan Ilmu Komputer</h4>
<p><strong>Fungsi Floor dan Ceiling</strong></p>
<p><img src="/assets/m3-floor.png" alt="Floor"></p>
<p><strong>Fungsi Modulus / Aritmatik Modular</strong><br>
Contoh:<br>
Modulo 12 : 5 + 8 = 1</p>
<p><strong>Fungsi Faktorial</strong><br>
n! = 1.2.3….(n-2).(n-1).n = (n-1)!.n = (n-2)!.(n-1).n dst.<br>
Contoh:<br>
n!/(n-1)! = n.(n-1)!/(n-1)! = n</p>
<p><strong>Fungsi Eksponensial dan Logaritmik</strong><br>
x = a^m = a.a…..a (m kali); a^0 = 1; a^-m = 1/a^m ; a^3 . a^5 = a ^(3+5) = a^8<br>
m = logb (x); b = basis</p>
<h4 id="fungsi-rekursif">Fungsi Rekursif</h4>
<p>Fungsi rekursif adalah fungsi yang memanggil dirinya sendiri</p>
<ul>
<li>Fungsi faktorial : jika n=0, maka n! =1<br>
Jika n&gt;0, maka n! = n.(n-1)!</li>
<li>Fungsi (Urutan) Fibonacci: (F)<br>
Jika n=0 atau n=1, maka Fn = n<br>
Jika n &gt; 1, maka Fn = Fn-2 + Fn-1</li>
<li>Fungsi Ackermann : (A) menghasilkan deretan pasangan bilangan bulat positif<br>
Jika m = 0, maka A(m,n) = n +1<br>
Jika m ≠ 0, tetapi n = 0, maka A(m,n) = A(m-1,1)<br>
Jika m ≠ 0 dan n ≠ 0, maka A9m,n) = A(m-1, A(m,n-1))</li>
</ul>
<h4 id="kardinalitas">Kardinalitas</h4>
<p>Kardinalitas adalah jumlah elemen suatu himpunan. Simbol : |X|<br>
Contoh :<br>
Kardinalitas koleksi X dari fungsi dari A = {a,b,c} ke B = {1,2,3,4} adalah |X| = n(B) pangkat n(A) = 43 = 64</p>
]]></content></item><item><title>Relasi</title><link>https://laymoth.dev/relasi/</link><pubDate>Sun, 26 Jun 2022 22:41:20 +0700</pubDate><guid>https://laymoth.dev/relasi/</guid><description>Himpunan Produk Himpunan hasil perkalian dua atau lebih himpunan terbatas, yang elemennya merupakan pasangan elemen dari himpunan-himpunan yang dikalikan dan bergantung pada urutannya. Simbol produk: X
Secara umum : A X B ≠ B X A
Contoh:
A = {1,2,3}, B = {a,b}, C = {x}
A X B = {&amp;lt;1,a&amp;gt;,&amp;lt;1,b&amp;gt;,&amp;lt;2,a&amp;gt;,&amp;lt;2,b&amp;gt;,&amp;lt;3,a&amp;gt;,&amp;lt;3,b&amp;gt;}, (ada 3 X 2 = 6 elemen)
A X B X C = {&amp;lt;1,a,x&amp;gt;,&amp;lt;1,b,x&amp;gt;,&amp;lt;2,a,x&amp;gt;,&amp;lt;2,b,x&amp;gt;,&amp;lt;3,a,x&amp;gt;,&amp;lt;3,b,x&amp;gt;}, (ada 3 X 2 X 1 = 6 elemen)</description><content type="html"><![CDATA[<h4 id="himpunan-produk">Himpunan Produk</h4>
<p>Himpunan hasil perkalian dua atau lebih himpunan terbatas, yang elemennya merupakan pasangan elemen dari himpunan-himpunan yang dikalikan dan bergantung pada urutannya. Simbol produk: X<br>
Secara umum : A X B ≠ B X A<br>
Contoh:<br>
A = {1,2,3}, B = {a,b}, C = {x}<br>
A X B = {&lt;1,a&gt;,&lt;1,b&gt;,&lt;2,a&gt;,&lt;2,b&gt;,&lt;3,a&gt;,&lt;3,b&gt;}, (ada 3 X 2 = 6 elemen)<br>
A X B X C = {&lt;1,a,x&gt;,&lt;1,b,x&gt;,&lt;2,a,x&gt;,&lt;2,b,x&gt;,&lt;3,a,x&gt;,&lt;3,b,x&gt;}, (ada 3 X 2 X 1 = 6 elemen)<br>
Berlaku ketentuan :<br>
(A X B) ∪ (A X C) = A X (B ∪ C) dan<br>
(A X B) ∩ (A X C) = A X (B ∩ C)</p>
<h4 id="himpunan-relasi">Himpunan Relasi</h4>
<p>Himpunan relasi (biner) R merupakan sub-himpunan dari himpunan produk P atau (R ⊂ P ) atau himpunan relasi adalah himpunan yang merelasikan elemen dua himpunan<br>
Contoh:<br>
A = {1,2}, B = {a,b}<br>
R = {&lt;1,a&gt;, &lt;2,b&gt;} merupakan himpunan relasi antara A dan B,<br>
Q = {&lt;1,b&gt;,&lt;2,a&gt;} juga merupakan himpunan relasi antara A dan B<br>
S = {&lt;1,a&gt;,&lt;1,b&gt;} juga merupakan himpunan relasi antara A dan B<br>
P = {&lt;1,a&gt;,&lt;1,b&gt;,&lt;2,a&gt;,&lt;2,b&gt;} merupakan himpunan relasi juga himpunan produk antara himpunan A dan B</p>
<h4 id="operasi-relasi">Operasi Relasi</h4>
<p>Operasi relasi antar himpunan terbatas menghasilkan himpunan relasi<br>
Jenis operasi relasi : lebih besar (&gt;), lebih kecil (&lt;) dan sama dengan (=)<br>
Contoh :<br>
A = {1,3,4}, B = {2,3}<br>
A &lt; B adalah R1 = {&lt;1,2&gt;, &lt;1,3&gt;}<br>
A &gt; B adalah R2 = {&lt;3,2&gt;,&lt;4,2&gt;,&lt;4,3&gt;}<br>
A = B adalah R3 = {&lt;3,3&gt;}</p>
<h4 id="representasi-relasi">Representasi Relasi</h4>
<p>Matriks<br>
Contoh :<br>
A = {1,2,3}, B = {x,y}<br>
R = {&lt;1,x&gt;, &lt;2,y&gt;, &lt;3,y&gt;}, adalah matriks (baris: A, kolom :B) :</p>
<p><img src="/assets/m2-matrix.png" alt="Matriks"></p>
<h4 id="graf-berarah">Graf Berarah</h4>
<p>Contoh : relasi pada himpunan A = {1,2,3,4} adalah<br>
R = {&lt;1,2&gt;,&lt;2,2&gt;,&lt;2,4&gt;,&lt;3,2&gt;,&lt;3,4&gt;,&lt;4,1&gt;,&lt;4,3&gt;}</p>
<p><img src="/assets/m2-graf.jpg" alt="Graf Berarah"></p>
<h4 id="komposisi-relasi">Komposisi Relasi</h4>
<p>Komposisi relasi (simbol: o) antara dua himpunan relasi akan menghasilkan himpunan relasi baru, jika ada elemen himpunan yang sama sebagai perantara<br>
Contoh-1 :<br>
A = {1,2,3}, B = {a,b}, C = {x,y}<br>
R = {&lt;1,a&gt;,&lt;1,b&gt;,&lt;2,a&gt;} (dapat ditulis : a R b = relasi elemen himpunan A dan B)<br>
S = {&lt;a,x&gt;,&lt;b,x&gt;,&lt;b,y&gt;} (dapat ditulis : b S c = relasi elemen himpunan B dan C)</p>
<p>Himpunan komposisi relasi : T = R o S atau (a R b) o (b S c) atau (a T c ) adalah<br>
T = {&lt;1,x&gt;,&lt;1,y&gt;,&lt;2,x&gt;} (ada 2 &lt;1,x&gt; dari &lt;1,a&gt;o&lt;a,x&gt; dan &lt;1,b&gt;o&lt;b,x&gt;)</p>
<p>Atau dengan cara mengalikan matris Mr dan Ms menjadi matriks Mt :</p>
<p><img src="/assets/m2-relasi.png" alt="Matriks"></p>
<p>Contoh-2 :<br>
X = {a, b, c}<br>
R = {&lt;a,b&gt;,&lt;a,c&gt;,&lt;b,a&gt;}<br>
S = {&lt;a,c&gt;,&lt;b,a&gt;,&lt;b,b&gt;,&lt;c,a&gt;}<br>
T = R o S = ?</p>
<p><img src="/assets/m2-contoh.png" alt="Matriks"></p>
<p>Jadi T = {&lt;a,a&gt;, &lt;a,b&gt;, &lt;b,c&gt;}</p>
<h4 id="tipe-relasi">Tipe Relasi</h4>
<p>Refleksif : Jika a R a untuk semua elemen a di himpunan A<br>
Simetrik : Jika a R b berimplikasi b R a<br>
Antisimetrik : Jika a R b dan b R a berimplikasi a ≠ b<br>
Transitif : Jika a R b dan b R c berimplikasi a R c<br>
Ekivalen : Jika bertipe relasi refleksif, simetrik dan transitif</p>
<p>Contoh :<br>
B = {1,2,3,4}<br>
R = {&lt;1,1&gt;,&lt;1,2&gt;,&lt;2,1&gt;,&lt;2,2&gt;,&lt;3,3&gt;} adalah relasi refleksif (di kanan dan kiri
semuanya mengandung : 1,2,3 dan kedua-duanya tidak ada 4)<br>
S = B X B adalah relasi simetrik (karena selalu ada pasangan seperti &lt;1,3&gt; dan &lt;3,1&gt;)<br>
R adalah juga relasi simetrik (ada &lt;1,2&gt; dan &lt;2,1&gt;, selain yang &lt;1,1&gt;,&lt;2,2&gt;,&lt;3,3&gt;)<br>
A = {&lt;1,1&gt;,&lt;1,2&gt;,&lt;2,2&gt;,&lt;2,3&gt;} adalah relasi antisimetrik (selain &lt;1,1&gt; dan &lt;2,2&gt;, ada &lt;1,2&gt; tetapi tidak ada &lt;2,1&gt; dan ada &lt;2,3&gt; tetapi tidak ada &lt;3,2&gt;)<br>
T = {&lt;1,2&gt;,&lt;2,3&gt;,&lt;1,3&gt;,&lt;3,3&gt;} adalah relasi transitif (ada &lt;1,2&gt; dan &lt;2,3&gt;, tetapi juga ada &lt;1,3&gt;)</p>
<h4 id="partisi">Partisi</h4>
<p>Partisi dari suatu himpunan adalah klas himpunan relasi yang disjoin secara mutual (semua elemen himpunan adalah elemen salah satu elemen partisi). Elemen partisi disebut sel dan merupakan sub-himpunan dari himpunan yang dipartisi<br>
Contoh :<br>
S = {1,2,3,4,5,6}<br>
P=[{1,3,5},{2,4},{6}] adalah partisi dari S<br>
N1=[{1,2,3},{1,4,5,6}] adalah bukan partisi dari S (karena elemen 1 ada pada dua sel)<br>
N2 = [{1,2,5},{2,4,6,7}] adalah bukan partisi dari S (karena {2,4,6,7} bukan sub-himpunan S)</p>
<h4 id="relasi-terner-dan-n-er">Relasi Terner dan N-er</h4>
<p>Jika relasi melibatkan tiga himpunan disebut relasi terner dan menghasilkan
himpunan relasi dengan elemen berbentuk triplet<br>
Secara umum relasi yang melibatkan banyak (N) himpunan disebut relasi N-er</p>
]]></content></item><item><title>Aljabar Boolean</title><link>https://laymoth.dev/aljabar-boolean/</link><pubDate>Sun, 26 Jun 2022 19:14:53 +0700</pubDate><guid>https://laymoth.dev/aljabar-boolean/</guid><description>Aljabar Boolean adalah ilmu yang mempelajari khusus himpunan B yang elemennya hanya dua, yaitu konstanta 1 dan konstanta 0 atau true (T) dan false (F) beserta operasinya. Juga terdapat dua jenis operasi, yaitu : union (+) yang dibaca : atau (OR) dan irisan (.) yang dibaca : dan (AND)
Asumsi yang berasal dari aksioma klosur (closure) : Setiap elemen a, b, c, … (variabel) adalah anggota B (bernilai 1 atau 0), sehingga: a + b ∈ B dan juga a .</description><content type="html"><![CDATA[<p>Aljabar Boolean adalah ilmu yang mempelajari khusus himpunan B yang elemennya
hanya dua, yaitu konstanta 1 dan konstanta 0 atau true (T) dan false (F) beserta
operasinya. Juga terdapat dua jenis operasi, yaitu : union (+) yang dibaca : atau
(OR) dan irisan (.) yang dibaca : dan (AND)<br>
Asumsi yang berasal dari aksioma klosur (closure) :
Setiap elemen a, b, c, … (variabel) adalah anggota B (bernilai 1 atau 0),
sehingga: a + b ∈ B dan juga a . b ∈ B</p>
<ul>
<li>
<p><strong>Aksioma dan prinsip dualitas</strong><br>
Terdapat lima aksioma (dalil yang kebenarannya tidak perlu dibuktikan lagi),
yang berpasang-pasangan (prinsip dualitas) yaitu :</p>
<p>Pertama : Aksioma Komutatif :<br>
a + b = b + a dan pasangan dualitasnya :<br>
a . b = b . a [seperti aljabar non Boolean]</p>
<p>Kedua : Aksioma Asosiatif :<br>
a + ( b + c ) = ( a + b ) + c dan pasangan dualitasnya :<br>
a . ( b . c ) = ( a . b ) . c [seperti aljabar non Boolean]</p>
<p>Ketiga : Aksioma Distributif :<br>
a . ( b + c) = (a . b) + (a . c) dan pasangan dualitasnya :<br>
a + (b . c ) = (a + b) . (a + c) [perlu dibuktikan]</p>
<p>Keempat : Aksioma Identitas (diri) :<br>
a + 0 = a dan pasangan dualitasnya :<br>
a . 1 = a [seperti aljabar non Boolean]</p>
<p>Kelima : Aksioma Komplemen (negasi) :<br>
a + a’ = 1 dan pasangan dualitasnya :<br>
a . a’ = 0</p>
</li>
<li>
<p><strong>Prinsip dualitas</strong><br>
Prinsip dualitas seperti berlaku pada aksioma di atas juga berlaku pada teorema dan hukum atau dalil (di bawah).</p>
<p>Yang dimaksud dengan prinsip dualitas adalah setiap persamaan Boolean selalu mempunyai pasangannya dengan cara mengganti dua hal, yaitu :</p>
<ul>
<li>(.) dengan (+) atau (+) dengan (.) dan</li>
<li>(0) dengan (1) atau (1) dengan (0).</li>
</ul>
</li>
<li>
<p><strong>Teorema dan prinsip dualitas</strong><br>
Terdapat dua teorema yang diturunkan dari aksioma atau teorema sebelumnya</p>
<p>Pertama, Teorema (1) atau teorema Idempoten :<br>
a + a = a dan pasangan dualitasnya :<br>
a . a = a</p>
<p>Kedua, Teorema (2) atau teorema Konstanta :<br>
a + 1 = 1 dan pasangan dualitasnya :<br>
a . 0 = 0</p>
</li>
<li>
<p><strong>Hukum Absorpsi dan de Morgan dan prinsip dualitas</strong>
Terdapat dua hukum atau dalil yang diturunkan dari aksioma dan teorema, yaitu :</p>
<p>Pertama, Hukum Absorpsi (Penyerapan) :<br>
a + (a . b) = a dan pasangan dualitasnya :<br>
a . (a + b) = a</p>
<p>Kedua, Hukum de Morgan :<br>
(a . b)’ = a’ + b’ dan pasangan dualitasnya :<br>
(a + b)’ = a’ . b’</p>
<p><strong>Pembuktian : Langsung</strong></p>
<ul>
<li>
<p>Teorema Idempoten (1a) dengan aksioma Identitas, Komplemen,
Distributif, Komplemen dan Identitas (sebelah kanan)<br>
a + a = a (dibuktikan)<br>
a + a = a + 0 (Identitas)<br>
a + a = a + (a . a’) (Komplemen)<br>
a + a = (a + a) . (a + a’) (Distributif)<br>
a + a = (a + a) . (1) (Komplemen)<br>
a + a = (a + a) (Identitas)</p>
</li>
<li>
<p>Teorema Idempoten (1b) dengan aksioma Identitas, Komplemen,
Distributif, Komplemen dan Identitas (sebelah kanan)<br>
a . a = a (dibuktikan)<br>
a . a = a . 1 (Identitas)<br>
a . a = a . (a + a’) (Komplemen)<br>
a . a = (a . a) + (a . a’) (Distributif)<br>
a . a = (a . a) + (0) (Komplemen)<br>
a . a = (a . a) (Identitas)</p>
</li>
<li>
<p>Teorema Konstanta (2a) dengan aksioma Komplemen, Asosiatif, teorema<br>
Idempoten (1a) dan aksioma Komplemen (sebelah kiri)
a + 1 = 1 (dibuktikan)<br>
a + (a + a’) = 1 (Komplemen)<br>
(a + a) + a’ = 1 (Asosiatif)<br>
a + a&rsquo; = 1 (Idempoten)<br>
1 = 1 (Komplemen)</p>
</li>
<li>
<p>Teorema Konstanta (2b) dengan aksioma Komplemen, Asosiatif, teorema<br>
Idempoten (1b) dan aksioma Komplemen (sebelah kiri)<br>
a . 0 = 0 (dibuktikan)<br>
a . (a . a’) = 0 (Komplemen)<br>
(a . a) . a’ = 0 (Asosiatif)<br>
a . a&rsquo; = 0 (Idempoten)<br>
0 = 0 (Komplemen)</p>
</li>
<li>
<p>Hukum absorpsi (a) dengan aksioma Identitas, Distributif, teorema<br>
Konstanta (2a), dan aksioma Identitas. (sebelah kiri)<br>
a + (a . b) = a (dibuktikan)<br>
(a . 1) + (a . b) = a (Identitas)<br>
a . (1 + b) = a (Distributif)<br>
a . 1 = a (Konstanta)<br>
a = a (Identitas)</p>
</li>
<li>
<p>Hukum Absorpsi (b) dengan aksioma Identitas, Distributif, teorema<br>
Konstanta (2b) dan aksioma Identitas (sebelah kiri)<br>
a . (a + b) = a (dibuktikan)<br>
(a + 0) . (a + b) = a (Identitas)<br>
a + (0. b) = a (Distributif)<br>
a + 0 = a (Konstanta)<br>
a = a (Identitas)</p>
</li>
</ul>
<p><strong>Pembuktian : Tidak langsung</strong></p>
<ul>
<li>
<p>Hukum de Morgan (a) : (a . b)’ = a’ + b’<br>
Diketahui : (a .b) .(a .b)’ = 0 (aksioma komplemen-b), buktikan : (a .b) .(a’ + b’) = 0, sehingga secara tidak langsung : (a . b ’) = (a’ + b’)
(melalui aksioma Distributif, Asosiatif, Komplemen dan teorema
Konstanta (2b) (sebelah kiri)<br>
(a . b) . (a’ + b’) = 0 (dibuktikan)<br>
(a . b) . a’ + (a . b) . b’ = 0 (Distributif)<br>
(a . a’) . b + a . (b . b’) = 0 (Asosiatif)<br>
0 . b + a . 0 = 0 (Komplemen)<br>
0 + 0 = 0 (Konstanta)</p>
</li>
<li>
<p>Hukum de Morgan (b) : (a + b)’ = a’ . b’<br>
Diketahui : (a + b) + (a + b)’= 1 (aksioma komplemen-a),
buktikan : (a + b) + (a’ .b’)=1, sehingga
secara tidak langsung : (a + b)’ = (a’ .b’)<br>
(melalui aksioma Distributif, Asosiatif, Komplemen dan teorema
Konstanta (2a) (sebelah kiri)<br>
(a +b) +(a’ . b’) = 1 (dibuktikan)<br>
((a + b) + a’) . ((a + b) + b’) = 1 (Distributif)<br>
((a + a’) + b) . (a + (b + b’)) = 1 (Asosiatif)<br>
(1 + b) . (a + 1) = 1 (Komplemen)<br>
1 . 1 = 1 (Konstanta)</p>
</li>
</ul>
<p><strong>Catatan</strong> : Untuk memudahkan operasi distributif, maka misalkan :</p>
<ul>
<li>
<p>a . b = c (untuk pembuktian hukum de Morgan (a)<br>
(a . b) . (a’ + b’) = 0 menjadi : ( c ) . (a’ + b’) = 0, sehingga :<br>
( c ) . a’ + ( c ) . b’ = 0 atau : (a . b) . a’ + (a . b) . b’ = 0 … dst</p>
</li>
<li>
<p>a + b = c (untuk pembuktian hukum de Morgan (b)<br>
(a +b) +(a’ . b’) = 1 menjadi : ( c ) +(a’ . b’) = 1, sehingga :<br>
(( c ) + a’) . (( c ) + b’) = 1 menjadi : ((a + b) + a’) . ((a + b) + b’) = 1 … dst</p>
</li>
</ul>
<p><strong>Pembuktian substitusi</strong> (melalui asumsi nilai 0 atau 1 dalam bentuk tabel)<br>
Untuk itu diperlukan tabel nilai hasil operasi union dan irisan terhadap dua konstanta (0 dan 1) dan dua variabel (a dan b)</p>
<p>Satu konstanta (0 atau 1)</p>
<table>
<thead>
<tr>
<th>Tabel 0</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0 + 0 atau 0 . 0</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Tabel 1</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>1 + 1 atau 1 . 1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>Dua konstanta ( 0 dan 1 )</p>
<table>
<thead>
<tr>
<th>Tabel union (+)</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>1</td>
<td>0 + 1 atau 1 + 0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Tabel irisan (.)</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>1</td>
<td>0 . 1 atau 1 . 0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>Dua variabel (a dan b), berdasarkan 4 tabel di atas :</p>
<table>
<thead>
<tr>
<th>Tabel union (+)</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>a</strong></td>
<td><strong>b</strong></td>
<td><strong>a + b</strong></td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Tabel irisan (.)</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>a</strong></td>
<td><strong>b</strong></td>
<td><strong>a + b</strong></td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>Aksioma Komutatif, Asosiatif dan Distributif (a) tidak perlu dibuktikan, kecuali Aksioma Distributif (b)</p>
<p><strong>Pembuktian</strong></p>
<ul>
<li>
<p>Aksioma Distributif (b) :
a + (b . c ) = (a + b) . (a + c)</p>
<table>
<thead>
<tr>
<th>Tabel kiri :</th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>a</strong></td>
<td><strong>b</strong></td>
<td><strong>c</strong></td>
<td><strong>b.c</strong></td>
<td><strong>a+(b.c)</strong></td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Tabel kanan :</th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>a</strong></td>
<td><strong>b</strong></td>
<td><strong>c</strong></td>
<td><strong>a+b</strong></td>
<td><strong>a+c</strong></td>
<td><strong>(a+b).(a+c)</strong></td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p><em>Kolom paling kanan tabel kiri dan kanan bernilai sama (terbukti)</em></p>
</li>
<li>
<p>Aksioma Identitas (a) :</p>
<table>
<thead>
<tr>
<th>a + 0 = a</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>0</td>
<td>a+0</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
<p><em>Kolom a dan kolom a + 0 bernilai sama</em></p>
</li>
<li>
<p>Aksioma Identitas (b) :</p>
<table>
<thead>
<tr>
<th>a . 1 = a</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>1</td>
<td>a.1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p><em>Kolom a dan kolom a . 1 bernilai sama</em></p>
</li>
<li>
<p>Aksioma Komplemen (a) :</p>
<table>
<thead>
<tr>
<th>a + a’ = 1</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>a’</td>
<td>a + a’</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
<p><em>Kolom paling kanan (a + a’) selalu bernilai 1 (terbukti)</em></p>
</li>
<li>
<p>Aksioma Komplemen (b) :</p>
<table>
<thead>
<tr>
<th>a . a’ = 0</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>a’</td>
<td>a + a’</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
<p><em>Kolom paling kanan (a + a’) selalu bernilai 0 (terbukti)</em></p>
</li>
</ul>
</li>
</ul>
]]></content></item><item><title>Teori Himpunan &amp; Prinsip Inklusi &amp; Ekslusi</title><link>https://laymoth.dev/teori-himpunan-prinsip-inklusi-ekslusi/</link><pubDate>Sat, 09 Apr 2022 10:27:00 +0700</pubDate><guid>https://laymoth.dev/teori-himpunan-prinsip-inklusi-ekslusi/</guid><description>Himpunan, Sub Himpunan, Sub-himpunan, himpunan, himpunan, dan Elemen Himpunan Huruf besar (kapital)
Elemen Huruf kecil
φ Himpunan kosong, himpunan yang tidak memiliki elemen
U Himpunan universal atau semesta
A = {1, 2, 3, 4, 5} Himpunan A mempunyai elemen : 1,2,3,4 dan 5
B = {6, 7, 8, 9, 0}
A ≠ B
C = {x: x bilangan bulat, 0 &amp;lt; x &amp;lt; 6}
A = C Himpunan A sama dengan C, jika elemen A sama dengan elemen C</description><content type="html"><![CDATA[<h4 id="himpunan-sub-himpunan-sub-himpunan-himpunan-himpunan-dan-elemen">Himpunan, Sub Himpunan, Sub-himpunan, himpunan, himpunan, dan Elemen</h4>
<p>Himpunan               Huruf besar (kapital)<br>
Elemen                   Huruf kecil<br>
φ                            Himpunan kosong, himpunan yang tidak memiliki elemen<br>
U                            Himpunan universal atau semesta<br>
A = {1, 2, 3, 4, 5}   Himpunan A mempunyai elemen : 1,2,3,4 dan 5<br>
B = {6, 7, 8, 9, 0}<br>
A ≠ B<br>
C = {x: x bilangan bulat, 0 &lt; x &lt; 6}<br>
A = C      Himpunan A sama dengan C, jika elemen A sama dengan elemen C<br>
1 ∈ A      1 adalah elemen himpunan A, atau 1 kepunyaan A<br>
1 ∉ B      1 bukan elemen himpunan B, A ≠ B<br>
D = {7, 9}<br>
E = { } atau E = φ      E adalah himpunan kosong<br>
D ⊆ B atau B ⊇ D      D adalah sub-himpunan B atau B mengandung D<br>
D ⊂ B atau B ⊃ D      D adalah sub-himpunan murni B</p>
<p>Contoh : simbol himpunan :<br>
N = himpunan bilangan bulat positif<br>
Q = himpunan bilangan rasional<br>
Z = himpunan bilangan bulat<br>
R = himpunan bilangan riil<br>
N dapat dijadikan himpunan semesta (U) dari himpunan A, B, D &amp; E</p>
<h4 id="diagram-venn-komparabel-disjoin">Diagram Venn, Komparabel, Disjoin</h4>
<p>Himpunan B dan D komparabel, karena D ⊆ B
Himpunan A dan B disjoin</p>
<p><img src="/assets/m1-diagramvenn.jpg" alt="Diagram Venn"></p>
<h4 id="operasi-himpunan-dan-produk">Operasi himpunan dan Produk</h4>
<p>Union :         A ∪ B = { x : x ∈ A atau x ∈ B}<br>
Interseksi :   A ∩ B = { x : x ∈ A dan x ∈ B}<br>
Komplemen (absolut) :     A’ = {x : x ∈ U, x ∉ A}<br>
Komplemen (relatif) :       A – B = { x : x ∈ A, x ∉ B} (perbedaan A terhadap B)</p>
<p><img src="/assets/m1-union.jpg" alt="Union dan Interseksi Himpunan"></p>
<p><img src="/assets/m1-komplemen.jpg" alt="Komplemen Absolut dan Komplemen Relatif"></p>
<p>Perbedaan simetri A dan B atau A ⊕ B adalah<br>
(A ∪ B) – (A ∩ B) atau (A – B) ∪ (B – A)<br>
Jika : A ⊆ B, maka A ∩ B = A dan A ∪ B = B</p>
<h4 id="hukum-aljabar-himpunan-dan-dualitas">Hukum aljabar himpunan dan Dualitas</h4>
<p>Hukum de Morgan<br>
(A ∪ B)’ = A’ ∩ B’ dan (A ∩ B)’ = A’ ∪ B’<br>
Hukum idempoten:<br>
A ∪ A = A dan A ∩ A = A<br>
Hukum asosiatif :<br>
(A ∪ B) ∪ C = A ∪ (B ∪ C) dan (A ∩ B) ∩ C = A ∩ (B ∩ C)<br>
Hukum komutatif:<br>
A ∪ B = B ∪ A dan A ∩ B = B ∩ A<br>
Hukum distributif :<br>
A ∪ (B ∩ C) = (A ∪ B) ∩ (A ∪ C) dan A ∩ (B ∪ C) = (A ∩ B) ∪ (A ∩ C)<br>
Hukum Identitas<br>
A ∪ φ = A dan A ∩ U = A<br>
Hukum Konstanta :<br>
A ∪ U = U dan A ∩ φ = φ<br>
Hukum Komplemen :<br>
A ∪ A’ = U dan A ∩ A’ = φ<br>
Hukum Absorpsi :<br>
A ∩ (A ∪ B) = A dan A ∪ (A ∩ B) = A<br>
Prinsip dualitas : tukar ∩ dengan ∪ dan U dengan φ atau sebaliknya<br>
Perbedaan simetri : ⊕, memenuhi hukum asosiatif, komutatif, dan distributif</p>
<h4 id="himpunan-terbatas-dan-prinsip-inklusi-dan-eksklusi-himpunan-terbatas-dan-prinsip-inklusi-dan-eksklusi">Himpunan terbatas dan Prinsip Inklusi dan Eksklusi Himpunan terbatas dan Prinsip Inklusi dan Eksklusi</h4>
<p>Himpunan terbatas A adalah himpunan A yang jumlah elemennya (n(A)) terbatas<br>
Prinsip inklusi dan eksklusi dua dan tiga himpunan terbatas yang berbeda:<br>
n(A ∪ B) = n(A) + n(B) – n(A ∩ B) atau n(A ∩ B) = n(A) + n(B) – n(A ∪ B)<br>
n(A ∪ B ∪ C) = n(A) + n(B) + n(C) – n(A ∩ B) – n(A ∩ C) – n(B ∩ C) +n(A∩B∩C)</p>
<h4 id="koleksi">Koleksi</h4>
<p>Koleksi adalah himpunan dari himpunan
Contoh :
K = [{1, 2, 3}, {2, 4}, {3, 5}]</p>
]]></content></item></channel></rss>