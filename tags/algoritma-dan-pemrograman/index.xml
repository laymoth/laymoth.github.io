<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Algoritma dan Pemrograman on Laymoth</title><link>https://laymoth.dev/tags/algoritma-dan-pemrograman/</link><description>Recent content in Algoritma dan Pemrograman on Laymoth</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Mon, 27 Jun 2022 21:22:58 +0700</lastBuildDate><atom:link href="https://laymoth.dev/tags/algoritma-dan-pemrograman/index.xml" rel="self" type="application/rss+xml"/><item><title>Macam Macam Percabangan Dan Perulangan</title><link>https://laymoth.dev/macam-macam-percabangan-dan-perulangan/</link><pubDate>Mon, 27 Jun 2022 21:22:58 +0700</pubDate><guid>https://laymoth.dev/macam-macam-percabangan-dan-perulangan/</guid><description>Percabangan if else Karakteristrik : terdapat pengkodisian yang cukup kompleks yang mempengaruhi hasil
Contoh :
nilaiUjian = 10 if((x &amp;lt; 100) &amp;amp; (x&amp;gt;80)) cetak lulus terbaik else if((x &amp;lt; 100) &amp;amp; (x&amp;gt;50)) cetak lulus else cetak gagal Percabangan switch case Karakteristrik : tidak terdapat pengkodisian yang ada hanyalah penukaran bilangan
Contoh :
noAbsent = 3 switch(noAbsent) case 1 : Ahmad Jainudin case 2 : Boby Sugandi case 3 : Dodi Sukmawan case 4 : Bukan Mahasiswa Percabangan case when Karakteristrik : terdapat pengkodisian tetapi tidak ada percabangan bersarang</description></item><item><title>Tiga Algoritma Dasar</title><link>https://laymoth.dev/tiga-algoritma-dasar/</link><pubDate>Mon, 27 Jun 2022 21:00:58 +0700</pubDate><guid>https://laymoth.dev/tiga-algoritma-dasar/</guid><description>Struktur dasar algoritma dibagi menjadi 3, yaitu : Sekuensial (Sequential) Pemilihan atau Percabangan (Selection) Perulangan (Looping) Sekuensial (Sequential) Sekuensial adalah algoritma yang terdiri dari satu atau lebih instruksi, yang setiap instruksinya dikerjakan secara berurutan sesuai dengan urutan penulisan algoritma tersebut. Sebuah instruksi dikerjakan setelah instruksi sebelumnya dikerjakan.
Contoh, Buat sebuah program/algoritma untuk menyelesaikan masalah tersebut “pindahkan air yang ada di ember A ke dalam ember B yang berisi air juga, dan sebaliknya ember B yang berisi air ke ember A yang berisi air juga”</description></item></channel></rss>